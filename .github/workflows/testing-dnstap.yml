name: tests dnstap

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
    branches:
      - main

permissions:
  contents: read

jobs:
  unbound:
    runs-on: ubuntu-22.04
    env:
      COLLECTOR_USER: runneradmin

    strategy:
      matrix:
        go-version: [ '1.23' ]
        unbound: [ '1.19.3', '1.20.0' ]

        mode: [ 'tcp' ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: build binary
      run: |
        go mod edit -go=${{ matrix.go-version }}
        go mod tidy 
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o go-dnscollector *.go

    - name: Deploy docker image
      run: |
        sudo docker run -d --network="host" --name=unbound --volume=$PWD/tests/testsdata/unbound/unbound_${{ matrix.mode }}.conf:/opt/unbound/etc/unbound/unbound.conf:z -v /tmp/:/opt/unbound/etc/unbound/tmp/:z mvance/unbound:${{ matrix.unbound }}
        until (dig -p 5553 www.github.com @127.0.0.1 | grep NOERROR); do sleep 5.0; done

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  coredns:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: [ '1.23' ]
        coredns: [ '1.10.1', '1.11.1' ]
        mode: [ 'tcp' ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: build binary
      run: |
        go mod edit -go=${{ matrix.go-version }}
        go mod tidy 
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o go-dnscollector *.go

    - name: Deploy coredns docker image
      run: |
        sudo docker run -d --network="host" --name=coredns -v $PWD/tests/testsdata/:$PWD/tests/testsdata/ -v /tmp/:/tmp/ coredns/coredns:${{ matrix.coredns }} -conf $PWD/tests/testsdata/coredns/coredns_${{ matrix.mode }}.conf
        until (dig -p 5553 www.github.com @127.0.0.1 | grep NOERROR); do sleep 5.0; done

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  coredns_tls:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: [ '1.23' ]
        coredns: [ '1.11.1' ]
        mode: [ 'tls' ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: build binary
      run: |
        go mod edit -go=${{ matrix.go-version }}
        go mod tidy 
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o go-dnscollector *.go

    - name: Generate certificate
      run: |
        openssl rand -base64 48 > passphrase.txt
        openssl genrsa -aes128 -passout file:passphrase.txt -out server.key 2048
        openssl req -new -passin file:passphrase.txt -key server.key -out server.csr -subj "/C=FR/O=krkr/OU=Domain Control Validated/CN=*.krkr.io"
        openssl rsa -in server.key -passin file:passphrase.txt -out dnscollector.key
        openssl x509 -req -days 36500 -in server.csr -signkey dnscollector.key -out dnscollector.crt
        mv dnscollector.key ./tests/testsdata/
        mv dnscollector.crt ./tests/testsdata/
        
    - name: Deploy coredns docker image
      run: |
        sudo docker run -d --network="host" --name=coredns -v $PWD/tests/testsdata/:$PWD/tests/testsdata/ -v /tmp/:/tmp/ coredns/coredns:${{ matrix.coredns }} -conf $PWD/tests/testsdata/coredns/coredns_${{ matrix.mode }}.conf
        until (dig -p 5553 www.github.com @127.0.0.1 | grep NOERROR); do sleep 5.0; done

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  dnsdist:
    runs-on: ubuntu-22.04
    env:
      COLLECTOR_USER: pdns

    strategy:
      matrix:
        go-version: [ '1.23' ]
        dnsdist: [ '17', '18', '19' ]

        mode: [ 'dnstaptcp', 'dnstapunix' ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: build binary
      run: |
        go mod edit -go=${{ matrix.go-version }}
        go mod tidy 
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o go-dnscollector *.go

    - name: add pdns user
      run: |
        sudo addgroup --system --gid 953 pdns
        sudo adduser --system --disabled-password --no-create-home -uid 953 --gid 953 pdns

    - name: Deploy dnsdist docker image
      run: |
        sudo docker run -d --network="host" --name=dnsdist --volume=$PWD/tests/testsdata/powerdns/dnsdist_${{ matrix.mode }}.conf:/etc/dnsdist/conf.d/dnsdist.conf:z -v /tmp/:/tmp/ powerdns/dnsdist-${{ matrix.dnsdist }}
        until (dig -p 5553 www.github.com @127.0.0.1 | grep NOERROR); do sleep 5.0; done

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo -E python3 -m unittest tests.dnsquery_${{ matrix.mode }} -v

  dnsdist_doq:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: [ '1.23' ]
        dnsdist: [ '19' ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: build binary
      run: |
        go mod edit -go=${{ matrix.go-version }}
        go mod tidy 
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o go-dnscollector *.go

    - name: download q
      run: |
        wget https://github.com/natesales/q/releases/download/v0.19.2/q_0.19.2_linux_amd64.tar.gz
        tar xvf q_0.19.2_linux_amd64.tar.gz

    - name: Generate certificate
      run: |
        openssl genrsa 2048 > ca.key
        openssl req -days 365 -new -x509 -nodes -key ca.key -out ca.crt -config <(echo -e "[ req ]\nprompt = no\ndistinguished_name = req_distinguished_name\n[ req_distinguished_name ]\ncountryName = LU\nstateOrProvinceName = Space\nlocalityName = Moon\norganizationName = Github\norganizationalUnitName = Lab\ncommonName = dnscollector.dev\nemailAddress = admin@dnscollector.dev")
        echo -e "[ req ]\nprompt = no\ndistinguished_name = req_distinguished_name\nreq_extensions = req_ext\n[ req_distinguished_name ]\ncountryName = LU\nstateOrProvinceName = Space\nlocalityName = Moon\norganizationName = Github\norganizationalUnitName = DNScollector\ncommonName = dnscollector.dev\nemailAddress = admin@dnscollector.dev\n[ req_ext ]\nsubjectAltName = DNS: dnscollector.dev, IP: 127.0.0.1" > server.conf
        openssl req -newkey rsa:2048 -nodes -keyout server.key -out server.csr --config server.conf 
        openssl x509 -req -days 365 -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -extensions req_ext -extfile server.conf
        sudo chmod 644 server.key

    - name: Deploy dnsdist docker image
      run: |
        sudo docker run -d --network="host" --name=dnsdist --volume=$PWD/tests/testsdata/powerdns/dnsdist_dox.conf:/etc/dnsdist/conf.d/dnsdist.conf:z --volume=$PWD/server.key:/etc/dnsdist/conf.d/server.key:z --volume=$PWD/server.crt:/etc/dnsdist/conf.d/server.crt:z powerdns/dnsdist-${{ matrix.dnsdist }}
        until (dig -p 5553 www.github.com @127.0.0.1 | grep NOERROR); do sleep 5.0; done

    - name: Tests
      run: |
        sudo python3 -m unittest tests.dnsquery_dnstapdoq -v
