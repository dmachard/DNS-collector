name: Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dev:
    strategy:
      matrix:
        os-version: ['ubuntu-22.04', 'macos-11']
        go-version: ['1.19']
        package: ['dnsutils', 'collectors', 'loggers', 'transformers']
    
    runs-on: ${{ matrix.os-version }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Set up Go for root
      run: |
        sudo ln -sf `which go` `sudo which go` || true
        sudo go version
        
    - name: Test ${{ matrix.package }}
      run: sudo go test -timeout 10s ./${{ matrix.package }}/ -cover -v

  int:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: ['1.19']
        package: ['config', 'clientquery_dnstaptcp', 'clientquery_dnstapunix' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2
 
    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: Test ${{ matrix.package }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.${{ matrix.package }} -v

  metrics:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: ['1.19']
        
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
 
    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: run collector
      run: ./go-dnscollector -config ./testsdata/config_webapi.yml &

    - name: check prometheus format metrics
      run: |
        wget -nv https://github.com/prometheus/prometheus/releases/download/v$PROM_VERSION/prometheus-$PROM_VERSION.linux-amd64.tar.gz
        tar xf prometheus-$PROM_VERSION.linux-amd64.tar.gz
        cd prometheus-$PROM_VERSION.linux-amd64/
        curl -u admin:changeme http://127.0.0.1:8080/metrics | ./promtool check metrics
      env:
        PROM_VERSION: "2.31.1"

  e2e-unbound:
    runs-on: ubuntu-22.04
    env:
      COLLECTOR_USER: runneradmin

    strategy:
      matrix:
        go-version: [ '1.19' ]
        unbound: [ '1.16.0' ]

        mode: [ 'tcp' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2

    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: Deploy docker image
      run: |
        sudo docker run -d --network="host" --name=unbound --volume=$PWD/testsdata/unbound_${{ matrix.mode }}.conf:/opt/unbound/etc/unbound/unbound.conf:z -v /tmp/:/opt/unbound/etc/unbound/tmp/:z mvance/unbound:${{ matrix.unbound }}
        dig -p 5553 www.github.com @127.0.0.1 +timeout=10 +tries=3 +retry=3 | grep NOERROR

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  e2e-coredns:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        go-version: [ '1.19' ]
        coredns: [ '1.9.4' ]

        mode: [ 'tcp', 'unix' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2

    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: Deploy coredns docker image
      run: |
        sudo docker run -d --network="host" --name=coredns -v $PWD/testsdata/:$PWD/testsdata/ -v /tmp/:/tmp/ coredns/coredns:${{ matrix.coredns }} -conf $PWD/testsdata/coredns_${{ matrix.mode }}.conf
        sudo docker logs coredns > /tmp/core.out
        sudo cat /tmp/core.out

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v

  e2e-dnsdist:
    runs-on: ubuntu-22.04
    env:
      COLLECTOR_USER: pdns

    strategy:
      matrix:
        go-version: [ '1.19' ]
        dnsdist: [ '17' ]

        mode: [ 'dnstaptcp', 'dnstapunix', 'powerdns']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-python@v2

    - name: build binary
      run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go

    - name: add pdns user
      run: |
        sudo addgroup --system --gid 953 pdns
        sudo adduser --system --disabled-password --no-create-home -uid 953 --gid 953 pdns

    - name: Deploy dnsdist docker image
      run: |
        sudo docker run -d --network="host" --name=dnsdist --volume=$PWD/testsdata/dnsdist_${{ matrix.mode }}.conf:/etc/dnsdist/conf.d/dnsdist.conf:z -v /tmp/:/tmp/ powerdns/dnsdist-${{ matrix.dnsdist }}
        dig -p 5553 www.github.com @127.0.0.1 +timeout=10 +tries=3 +retry=3 | grep NOERROR

    - name: Test ${{ matrix.mode }}
      run: |
        sudo python3 -m pip install dnstap_pb fstrm dnspython
        sudo python3 -m pip install --upgrade protobuf
        sudo -E python3 -m unittest tests.dnsquery_${{ matrix.mode }} -v
