package dnsutils

import (
	"errors"
	"testing"
)

// Benchmark

func BenchmarkDnsParseLabels(b *testing.B) {
	payload := []byte{0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
		0x74, 0x79, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x06,
		0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x03, 0x63, 0x6f, 0x6d, 0x00,
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _, err := ParseLabels(0, payload)
		if err != nil {
			b.Fatalf("could not parse labels: %v\n", err)
		}
	}
}

func TestDecodeDnsLabel_InvalidOffset_NegativeOffset(t *testing.T) {
	payload := []byte{0x01, 0x61, 0x00}

	_, _, err := ParseLabels(-1, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidOffset) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidOffset_StartOutOfBounds(t *testing.T) {
	payload := []byte{0x01, 0x61, 0x00}

	_, _, err := ParseLabels(4, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooShort) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidOffset_RunOutOfBounds(t *testing.T) {
	payload := []byte{0x01, 0x61}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooShort) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidOffset_PointerByteOutOfBounds(t *testing.T) {
	payload := []byte{0x01, 0x61, 0xc0}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooShort) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_LabelTooShort(t *testing.T) {
	payload := []byte{0x01}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooShort) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_NoExtraDotAfterPtr(t *testing.T) {
	payload := []byte{0x00, 0x01, 0x61, 0xc0, 0x00}

	label, _, _ := ParseLabels(1, payload)
	if label != "a" {
		t.Errorf("bad label parsed: %v", label)
	}
}

func TestDecodeDnsLabel_InvalidLabelLengthByte1(t *testing.T) {
	payload := []byte{0x40}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidData) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidLabelLengthByte2(t *testing.T) {
	payload := []byte{0x80}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidData) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_ValidTotalLength(t *testing.T) {
	// A 253-character label
	payload := []byte{
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3d, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x00,
	}
	valid := "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

	label, _, _ := ParseLabels(0, payload)
	if label != valid {
		t.Errorf("bad name parsed: %v", label)
	}
}

func TestDecodeDnsLabel_InvalidTotalLength_WithoutPtr(t *testing.T) {
	// A 254-character label (including separator dots)
	payload := []byte{
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3e, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x00,
	}
	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooLong) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidTotalLength_WithPtr(t *testing.T) {
	// A 254-character label (including separator dots), containing a pointer
	payload := []byte{
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x3c, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
		0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x00, 0x01,
		0x61, 0xc0, 0x00,
	}
	_, _, err := ParseLabels(255, payload)
	if !errors.Is(err, ErrDecodeDNSLabelTooLong) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_SimpleLoop(t *testing.T) {
	payload := []byte{0x01, 0x61, 0xc0, 0x00}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_Forwards(t *testing.T) {
	payload := []byte{0xc0, 0x02, 0x00}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_BackwardsInsideCurrentLabel1(t *testing.T) {
	payload := []byte{0x01, 0x02, 0xc0, 0x01, 0x00}

	_, _, err := ParseLabels(0, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_BackwardsOverlappingLoop(t *testing.T) {
	payload := []byte{0x01, 0x61, 0x01, 0x61, 0xc0, 0x00}

	_, _, err := ParseLabels(2, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_BackwardsOverlappingTerminating(t *testing.T) {
	payload := []byte{0x01, 0x01, 0x00, 0xc0, 0x00}

	_, _, err := ParseLabels(1, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_InvalidPtr_BackwardsOverlappingPtr(t *testing.T) {
	// The second pointer byte overlaps the beginning of the label that starts at payload[3]
	payload := []byte{0x00, 0x00, 0xc0, 0x01, 0x00, 0xc0, 0x02}

	_, _, err := ParseLabels(3, payload)
	if !errors.Is(err, ErrDecodeDNSLabelInvalidPointer) {
		t.Errorf("bad error returned: %v", err)
	}
}

func TestDecodeDnsLabel_EndOffset_WithoutPtr(t *testing.T) {
	payload := []byte{0x02, 0x61, 0x61, 0x00}

	_, offset, _ := ParseLabels(0, payload)
	if offset != 4 {
		t.Errorf("invalid end offset: %v", offset)
	}
}

func TestDecodeDnsLabel_EndOffset_WithPtr(t *testing.T) {
	payload := []byte{0x01, 0x61, 0x00, 0x02, 0x61, 0x61, 0xc0, 0x00}

	_, offset, _ := ParseLabels(3, payload)
	if offset != 8 {
		t.Errorf("invalid end offset: %v", offset)
	}
}
